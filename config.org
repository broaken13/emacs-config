* General

** Home functions
Define helper constant and function

#+BEGIN_SRC emacs-lisp
  (defconst bryce/emacs-directory (concat (getenv "HOME") "/.emacs.d/"))
  (defun bryce/emacs-subpath (d) (expand-file-name d bryce/emacs-directory))
#+END_SRC

** Create subfolders
Also, add elisp folder to path in case of other packages not in repositories.

#+BEGIN_SRC emacs-lisp
  (let* ((subfolders '("elisp" "backups"))
         (fullpaths (mapcar (lambda (d) (bryce/emacs-subpath d)) subfolders)))
    (dolist (dir fullpaths)
      (when (not (file-exists-p dir))
        (message "Make directory: %s" dir)
        (make-directory dir))))
  (add-to-list 'load-path (bryce/emacs-subpath "elisp"))
#+END_SRC

** Backups
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `(("." . ,(bryce/emacs-subpath "backups"))))
  (setq tramp-backup-directory-alist backup-directory-alist)
  (setq vc-make-backup-files t)
#+END_SRC

** Custom file
Keep custom config separate from init file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (bryce/emacs-subpath "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

** Tabs
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq tab-width 2)
  (setq-default tab-always-indent 'complete)
  (setq-default tab-width 2)
#+END_SRC

** Search
Adjust search keybindings.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-r") 'isearch-backward)
#+END_SRC

** Y or N
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Set path
 #+BEGIN_SRC emacs-lisp
   (when window-system
     (let ((path-from-shell (shell-command-to-string "/bin/zsh -l -c 'echo $PATH'")))
       (setenv "PATH" path-from-shell)
       (setq exec-path (split-string path-from-shell path-separator))))
 #+END_SRC


** Other
Show parens, highlight the line, delete selections and other random configs.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (delete-selection-mode 1)
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
  (global-set-key (kbd "M-/") 'hippie-expand)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq save-interprogram-paste-before-kill t
        apropos-do-all t
        load-prefer-newer t)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

*** Highlight Line

#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode 1))
#+END_SRC

*** Scroll conservatively

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

*** Linum mode
But only in programming modes.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC

*** Inhibit startup
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC

*** Remove the bars

#+BEGIN_SRC emacs-lisp
  (when (window-system)
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (when (fboundp 'horizontal-scroll-bar-mode)
      (horizontal-scroll-bar-mode -1))
    (scroll-bar-mode -1))
#+END_SRC

* Global packages
** Ivy
Requirement for others.
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t)
#+END_SRC
** Dimnish
Diminish to hide stuff from the bar.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)
#+END_SRC
** Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode)
    :diminish which-key-mode)
#+END_SRC

** Try
#+BEGIN_SRC emacs-lisp
  (require 'use-package)
  (use-package try
    :ensure t)
#+END_SRC

** Dash
#+BEGIN_SRC emacs-lisp
  (use-package dash
    :ensure t
    :config (eval-after-load 'dash '(dash-enable-font-lock)))
#+END_SRC

** Undo tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :init (global-undo-tree-mode 1)
    :config (defalias 'redo 'undo-tree'redo)
    :bind (("C-z" . undo)
           ("C-S-z" . redo)))
#+END_SRC

** Ace window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (global-set-key (kbd "M-o") 'ace-window)
    :diminish ace-window-mode)
#+END_SRC

** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :init
    (smartparens-global-mode 1)
    :diminish smartparens-mode)
#+END_SRC

** Avy
I want my avy-goto-char to put me in front of the char.

#+BEGIN_SRC emacs-lisp
  (use-package avy
               :ensure t
               :bind
               ("M-g g" . avy-goto-line))

  (defun bryce/goto-char (char)
    (interactive (list (read-char "char: " t)))
    (avy-goto-char char)
    (forward-char)
    )

  (global-set-key (kbd "M-s") 'bryce/goto-char)

#+END_SRC
** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t)
  (use-package swiper-helm
    :ensure t
    :bind ("C-s" . 'swiper-helm))
#+END_SRC
* Helm
I like helm

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind (("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("M-y" . helm-show-kill-ring)
           ("C-x r b" . helm-filtered-bookmarks)
           ("C-x b" . helm-mini)
           ("C-h SPC" . helm-all-mark-rings))
    :bind (:map helm-map
                ("<tab>" . helm-execute-persistent-action)
                ("C-i" . helm-execute-persistent-action)
                ("C-a" . helm-select-action))
    :config (progn
              (when (executable-find "curl")
                (setq helm-google-suggest-use-curl-p t))

              (setq helm-split-window-in-side-p t
                    helm-M-x-fuzzy-match t
                    helm-buffers-fuzzy-matching t
                    helm-recentf-fuzzy-match t)
              (setq helm-autoresize-max-height 0
                    helm-autoresize-min-height 20)
              (helm-autoresize-mode 1)
              (helm-mode 1))
    :diminish (helm-mode))

  (global-unset-key (kbd "C-x c"))
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
#+END_SRC

* Theme
I use the yoshi theme

#+BEGIN_SRC emacs-lisp
  (use-package yoshi-theme
    :ensure t
    :config (load-theme 'yoshi))
#+END_SRC

* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init (setq company-dabbrev-ignore-case t
                company-show-numbers t
                company-idle-delay 0
                company-minimum-prefix-length 2)
    :config
    (global-company-mode 1)
    :diminish company-mode)
#+END_SRC

** Quickhelp
Provides tooltips for company completions.
#+BEGIN_SRC emacs-lisp
  (use-package company-quickhelp
    :ensure t
    :config (company-quickhelp-mode 1))
#+END_SRC

* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init (yas-global-mode 1)
    :config (add-to-list 'yas-snippet-dirs (bryce/emacs-subpath "snippets")))
#+END_SRC

* Flyspell and Flycheck

** Flyspell
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :ensure t
    :diminish flyspell-mode
    :init
    (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    (add-hook 'text-mode-hook (lambda () (flyspell-mode 1)))
    (add-hook 'org-mode-hook (lambda () (flyspell-mode 1)))
    (dolist (hook '(change-log-mode-hook log-edit-mode-hook org-agenda-mode-hook))
      (add-hook hook (lambda () (flyspell-mode -1))))
    :config
    (setq ispell-local-dictionary "en_US"))
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-flycheck-mode)
    :config
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
    :diminish (flycheck-mode))
#+END_SRC
* Magit
Only git interface better than command line. (Just barely)

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
#+END_SRC

* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :bind ("C-c p" . 'projectile-command-map)
      :config (projectile-mode +1)
      :diminish (projectile-mode))

    (use-package helm-projectile
      :ensure t
      :config (helm-projectile-on))
#+END_SRC

* Eldoc
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :diminish eldoc-mode
    :init (setq eldoc-idle-delay 0.1))
#+END_SRC
* Programming
** Javascript
My favorite

*** Js2 Mode
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :init
    (setq js-basic-indent 2)
    (setq-default js2-basic-indent 2
                  js2-basic-offset 2
                  js2-auto-indent-p t
                  js2-cleanup-whitespace t
                  js2-enter-indents-newline t
                  js2-indent-on-enter-key t
                  js2-global-externs (list "window" "module" "require" "assert" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "console" "JSON" "$" "__dirname"))
    (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode)))
#+END_SRC

*** Js2 refactor
#+BEGIN_SRC emacs-lisp
  (use-package js2-refactor
    :ensure t
    :init (add-hook 'js2-mode-hook 'js2-refactor-mode)
    :config (js2r-add-keybindings-with-prefix "C-c ."))
#+END_SRC

*** Color Identifiers
I'm not sure if this works

#+BEGIN_SRC emacs-lisp
  (use-package color-identifiers-mode
    :ensure t
    :init
    (add-hook 'js2-mode-hook 'color-identifiers-mode))
#+END_SRC
** Web
*** Emmet
Emmet is bomb

#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :init
    (setq emmet-indentation 2)
    (setq emmet-move-cursor-between-quotes t)
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'css-mode-hook 'emmet-mode))
#+END_SRC
** Python
*** Configure python mode
#+BEGIN_SRC emacs-lisp
  (use-package python
    :mode
    ("\\.py\\'" . python-mode)
    ("\\.wsgi$" . python-mode)
    :interpreter ("python" . python-mode)

    :init
    (setq-default indent-tabs-mode nil)

    :config
    (setq python-indent-offset 4)
    (add-hook 'python-mode-hook 'color-identifiers-mode))
#+END_SRC
*** Jedi Company
#+BEGIN_SRC emacs-lisp
  (use-package company-jedi
    :ensure t
    :init (add-hook 'python-mode-hook 'company-jedi)
    (setq company-jedi-python-bin "python"))
#+END_SRC
* Org
** Org Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** Elisp Template
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** Twitter Bootstrap
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t)
#+END_SRC
