* Basic Setup

** Performance
 ~Set the garbage collecion threshold to 100 MB and potentially fix some TLS warnings~
 We're moving a couple of these to the init.el file to hopefully speed things up

** Skip the startup screen

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src

** Setup use-package

We'll use use-package to help manage our packages

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("org" . "http://orgmode.org/elpa/")
			   ("gnu" . "http://elpa.gnu.org/packages/")
			   ("melpa" . "http://melpa.org/packages/")))
  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 5)
    (auto-package-update-prompt-before-update t)
    :config
    (auto-package-update-maybe))
#+end_src

** Home functions
Define helper constant and function

#+BEGIN_SRC emacs-lisp
  (defconst bryce/emacs-directory (concat (getenv "HOME") "/.emacs.d/"))
  (defun bryce/emacs-subpath (d) (expand-file-name d bryce/emacs-directory))
#+END_SRC

** Create subfolders
Also, add elisp folder to path in case of other packages not in repositories.

#+BEGIN_SRC emacs-lisp
  (let* ((subfolders '("elisp" "backups"))
         (fullpaths (mapcar (lambda (d) (bryce/emacs-subpath d)) subfolders)))
    (dolist (dir fullpaths)
      (when (not (file-exists-p dir))
        (message "Make directory: %s" dir)
        (make-directory dir))))
  (add-to-list 'load-path (bryce/emacs-subpath "elisp"))
#+END_SRC

** Backups
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `(("." . ,(bryce/emacs-subpath "backups"))))
  (setq tramp-backup-directory-alist backup-directory-alist)
  (setq vc-make-backup-files t)
#+END_SRC

** Custom file
Keep custom config separate from init file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (bryce/emacs-subpath "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

** Set path
 #+BEGIN_SRC emacs-lisp
   (when window-system
     (let ((path-from-shell (shell-command-to-string "/bin/zsh -l -c 'echo $PATH'")))
       (setenv "PATH" path-from-shell)
       (setq exec-path (split-string path-from-shell path-separator))))
 #+END_SRC

** Interprogram Paste
This will save the contents of the clipboard to the kill ring if it is from outside the emacs

#+begin_src emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+end_src

** Load prefer newer

#+begin_src emacs-lisp
  (setq load-prefer-newer t)
#+end_src

** Set the display

Remove all the bars
#+begin_src emacs-lisp
  (when (window-system)
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (when (fboundp 'horizontal-scroll-bar-mode)
      (horizontal-scroll-bar-mode -1))
    (scroll-bar-mode -1))
#+end_src

** Auto revert
Automatically revert if file is changed externally
#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

* Aesthetics
** Theme
We will be using themes from doom emacs
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t
	  doom-themes-enable-italic t)
    (load-theme 'doom-opera t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))
#+end_src

** Modeline
Prerequisite:
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+end_src

Make sure to run all-the-icons-install-fonts or whatever on new machines

We want doom emacs mode line too
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init
    (setq doom-modeline-support-imenu t
	  doom-modeline-project-detection 'auto
	  doom-modeline-buffer-file-name-style 'relative-from-project
	  doom-modeline-icon t
	  doom-modeline-time t)
    (doom-modeline-mode 1))
#+end_src

** Font
Fira Code is a really nice font
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Fira Code")
#+end_src

*** TODO Setup Ligatures

* Helm

Helm is a great autocomplete framework.

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind (("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("M-y" . helm-show-kill-ring)
           ("C-x r b" . helm-filtered-bookmarks)
           ("C-x b" . helm-mini)
           ("C-h SPC" . helm-all-mark-rings))
    :bind (:map helm-map
                ("<tab>" . helm-execute-persistent-action)
                ("C-i" . helm-execute-persistent-action)
                ("C-a" . helm-select-action))
    :config (progn
              (when (executable-find "curl")
                (setq helm-google-suggest-use-curl-p t))

              (setq helm-split-window-inside-p t
                    helm-M-x-fuzzy-match t
                    helm-buffers-fuzzy-matching t
                    helm-recentf-fuzzy-match t)
              (setq helm-autoresize-max-height 0
                    helm-autoresize-min-height 20)
              (helm-autoresize-mode 1)
              (helm-mode 1))
    :diminish (helm-mode))

  (global-unset-key (kbd "C-x c"))
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
#+END_SRC

* Packages

** Which Key
Which key shows available keys when doing combos

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
    (setq which-key-idle-delay .5)
    :diminish which-key-mode)
#+END_SRC

** Diminish

Diminish hides certain modes in the mode bar to keep it from getting too cluttered

#+BEGIN_SRC emacs-lisp
   (use-package diminish
     :ensure t)
#+END_SRC

** Ace Window
Ace provides a way of selecting which window to jump to. Here we set the window selection keys to the homerow.

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (global-set-key (kbd "M-o") 'ace-window)
    (global-set-key (kbd "C-x w") 'ace-delete-window)
    :diminish ace-window-mode)
#+END_SRC

** Swiper
Swiper is an improved search utility

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t)
  (use-package swiper-helm
    :ensure t
    :init
    (setq swiper-helm-display-function 'helm-default-display-buffer)
    :bind ("C-s" . 'swiper-helm))
#+END_SRC

** Magit
Only git interface better than command line. (Just barely)

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
#+END_SRC

* Editing

** Delete trailing whitespace
Delete trailing whitespace on save
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Tabs

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil
		tab-width 4)
#+end_src

** Flyspell
Flyspell does spell check for us

#+begin_src emacs-lisp
  (use-package flyspell
    :ensure t
    :diminish flyspell-mode
    :hook
    (text-mode . flyspell-mode)
    (org-mode . flyspell-mode)
    (prog-mode . flyspell-prog-mode)
    :config (setq ispell-local-dictionary "en_US"))
#+end_src

** Delete Selection When Typing
#+begin_src emacs-lisp
  (delete-selection-mode t)
#+end_src

* Programming

Here we turn on line numbers when programming.
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'linum-mode)
#+end_src

** SmartParens
SmartParens helps complete parens for us
#+begin_src emacs-lisp
  (use-package smartparens
    :hook (prog-mode . smartparens-mode))

  (require 'smartparens-config)
#+end_src

** LSP
Language Server Protocol helps provide IDE functionality by allowing Emacs to communicate with specialized language servers.
This sets up the basic LSP functionality. Actual language servers will need to be installed, and be configured in their specific section.
[[https://emacs-lsp.github.io/lsp-mode/][LSP mode homepage]]

#+begin_src emacs-lisp
  (defun bryce/setup-lsp-mode ()
    (setq lsp-headerline-breadcrumb-segments '(file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    (setq lsp-restart 'auto-restart)
    :hook (;; We'll want to add some hooks here later for languages
           (lsp-mode . bryce/setup-lsp-mode)
           (lsp-mode . lsp-enable-which-key-integration)
           (web-mode . lsp-deferred)
           (rust-mode . lsp-deferred)
           )
    :commands (lsp lsp-deferred))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode))

  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
#+end_src

** Company mode
[[https://company-mode.github.io/][Company mode page]]

I only want company mode on in programming modes. I don't like it in org mode.

[[https://github.com/sebastiencs/company-box][Company Box]] is an improved front end

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind
    (:map company-active-map
	  ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
	  ("<tab>" . company-indent-or-complete-common))
    :init (setq company-dabbrev-ignore-case t
		company-show-numbers t
		company-minimum-prefix-length 1
		company-idle-delay 0)
    :diminish company-mode)

  (use-package company-box
    :hook (company-mode . company-box-mode))

  (add-hook 'prog-mode-hook 'company-mode)

#+end_src

** Flycheck

Flycheck checks our code on the fly

#+begin_src emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (add-hook 'prog-mode-hook 'flycheck-mode)
      :config
      (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
      :diminish (flycheck-mode))
#+end_src

** Languages
*** Haskell

#+begin_src emacs-lisp
  (use-package lsp-haskell
    :ensure t
    :hook (haskell-mode . lsp-deferred))
#+end_src

*** HTML/CSS

#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :mode (("\\.html\\" . web-mode)
           ("\\.htm\\"  . web-mode)
           ("\\.css\\"  . web-mode))
    :commands web-mode)
#+end_src

*** JS
#+begin_src emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode (("\\.js" . js2-mode)
           ("\\.jsx" . js2-mode)))
#+end_src

*** Rust
#+begin_src emacs-lisp
  (use-package rustic
    :config
    (setq rustic-format-on-save-p t)
    )
#+end_src
*** JSON
#+begin_src emacs-lisp
  (use-package json-mode)
#+end_src

* Org Mode
** Org Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

** Babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)))
#+END_SRC

** Elisp Template
A convinient template for adding these source blocks
#+BEGIN_SRC emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp"))
#+END_SRC
